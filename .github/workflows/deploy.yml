name: Secure EC2 Deployment

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      # 1) Check out your code
      - name: Check out repo
        uses: actions/checkout@v3

      # 2) OPTIONAL: Configure AWS credentials via GitHub OIDC (no long-lived secrets)
      #    If you want to securely fetch secrets from AWS SSM or S3, you can do that here.
      #
      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     role-to-assume: arn:aws:iam::123456789012:role/GithubActionsDeploymentRole
      #     aws-region: eu-central-1

      # 3) Start SSH agent and load private key from GitHub Secrets
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # 4) (Recommended) Strict host key checking
      #    - If you want to skip host key checks, set "StrictHostKeyChecking no"
      #    - For better security, add known_host lines pinned to your EC2â€™s host key
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Example of skipping host key check (less secure):
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      # 5) Debug step to confirm the SSH key is loaded
      - name: List loaded SSH keys
        run: ssh-add -l

      # 6) Deploy (securely copy files, then run remote commands)
      - name: Deploy to EC2
        run: |
          echo "Starting deployment to EC2..."

          # Replace 'ubuntu' with the correct user for your AMI
          REMOTE_USER="ubuntu"
          REMOTE_HOST="ec2-3-70-223-49.eu-central-1.compute.amazonaws.com"

          # Secure copy your build artifact(s) or website files
          scp -v ./index.html $REMOTE_USER@$REMOTE_HOST:/tmp/index.html

          # SSH into the EC2 instance and perform final tasks
          ssh -v $REMOTE_USER@$REMOTE_HOST << 'EOF'
            # Move and set ownership/permissions in one go
            sudo mv /tmp/index.html /usr/share/nginx/html/index.html
            sudo chown root:root /usr/share/nginx/html/index.html
            sudo chmod 644 /usr/share/nginx/html/index.html

            # Reload Nginx to pick up the new content
            sudo systemctl reload nginx || sudo systemctl restart nginx

            echo "Deployment completed successfully!"
          EOF



